# Config file for g2o
# 
# It defines the following variables: 
# 
# G2O_INCLUDE_DIRS     - include directory 
# G2O_LIBRARIES        - all libraries 
#
# And for the individual components:
#
# G2O_STUFF_LIBRARY
# G2O_CORE_LIBRARY
# G2O_CLI_LIBRARY
# G2O_SOLVER_CHOLMOD
# G2O_SOLVER_CSPARSE
# G2O_SOLVER_CSPARSE_EXTENSION
# G2O_SOLVER_DENSE
# G2O_SOLVER_PCG
# G2O_SOLVER_SLAM2D_LINEAR
# G2O_SOLVER_STRUCTURE_ONLY
# G2O_SOLVER_EIGEN
# G2O_TYPES_DATA
# G2O_TYPES_ICP
# G2O_TYPES_SBA
# G2O_TYPES_SCLAM2D
# G2O_TYPES_SIM3
# G2O_TYPES_SLAM2D
# G2O_TYPES_SLAM3D

get_filename_component(G2O_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH) 

set(G2O_INCLUDE_DIRS "@CONF_INCLUDE_DIRS@") 
set(G2O_LIBRARIES)

# Set variable for individual library and also append to G2O_LIBRARIES
macro(find_g2o_library VARNAME LIBRARYNAME)
find_library(${VARNAME}
  NAMES "g2o_${LIBRARYNAME}"
  PATHS
  @CONF_LIBRARY_DIR@
  NO_DEFAULT_PATH
  )
#Append to the global list of all libraries
list(APPEND G2O_LIBRARIES ${${VARNAME}})
endmacro(find_g2o_library VARNAME LIBRARYNAME)

# Now populate the variables
# Find the core elements
find_g2o_library(G2O_STUFF_LIBRARY stuff)
find_g2o_library(G2O_CORE_LIBRARY core)

# Find the CLI library
find_g2o_library(G2O_CLI_LIBRARY cli)

# Find the pluggable solvers
find_g2o_library(G2O_SOLVER_CHOLMOD solver_cholmod)
find_g2o_library(G2O_SOLVER_CSPARSE solver_csparse)
find_g2o_library(G2O_SOLVER_CSPARSE_EXTENSION csparse_extension)
find_g2o_library(G2O_SOLVER_DENSE solver_dense)
find_g2o_library(G2O_SOLVER_PCG solver_pcg)
find_g2o_library(G2O_SOLVER_SLAM2D_LINEAR solver_slam2d_linear)
find_g2o_library(G2O_SOLVER_STRUCTURE_ONLY solver_structure_only)
find_g2o_library(G2O_SOLVER_EIGEN solver_eigen)

# Find the predefined types
find_g2o_library(G2O_TYPES_DATA types_data)
find_g2o_library(G2O_TYPES_ICP types_icp)
find_g2o_library(G2O_TYPES_SBA types_sba)
find_g2o_library(G2O_TYPES_SCLAM2D types_sclam2d)
find_g2o_library(G2O_TYPES_SIM3 types_sim3)
find_g2o_library(G2O_TYPES_SLAM2D types_slam2d)
find_g2o_library(G2O_TYPES_SLAM3D types_slam3d)
